$deployTagPrefix="deploy"


def show_usage()
	puts "\nUsage: ./deploy.sh <project-name> <environment(s)>\n"
	puts "Valid targets:"
	$projects_and_environments.each do |project, environments|
		puts "\t#{project}"
		environments.each do |environment|
			puts "\t\t#{environment}"
		end
	end

end

def get_projects_and_environments()

	projects = Dir.glob('*').select { |f| File.directory? f }
	for project in projects
		$projects_and_environments[project] = []
		Dir.glob("#{project}/values.env.*.yaml") { |file|
			envFileArray = file.split("/")
			envName = envFileArray[1].split(".")[2]
			$projects_and_environments[project].append(envName)
		}
	end
end

def validate_environment(project, environment)

	if $projects_and_environments[project]
		if $projects_and_environments[project].include? environment
			validate_circleci_context(project, environment)
			return true
		end
		puts
		if environment == ""
			printf "Missing environment argument "
		else
			printf "Invalid Environment: #{environment} "
		end
		printf "for Project: #{project} \n"
		exit
	end
	puts
	puts "Invalid Project: #{project}"
	exit
end


def validate_circleci_context(project, environment)
	environment_yaml = "#{project}/values.env.#{environment}.yaml"
	# Get desired CircleCI context from the environment's YAML file
	begin
		environment_values = YAML.load_file(environment_yaml)
		raise unless environment_values.key?("circleci_context")
		circleci_context = environment_values["circleci_context"]
	rescue
		puts "\n\nError: Could not find 'circleci_context' in values file."
		puts "Add 'circleci_context: <context>' to '#{environment_yaml}'"
		exit
	end

	# Check that the context matches an existing context
	begin
		valid_contexts = []
		circleci_config = YAML.load_file(".circleci/config.yml")
		circleci_config["workflows"].each do |workflow|
			workflow[1]["jobs"].each do |job|
				valid_contexts.append(job.first[1]["context"])
			end
		end
	rescue
		puts "Could not find valid contexts in config.yml"
	end

	if not valid_contexts.include? circleci_context
		puts "\n\nError: The 'circleci_context' in '#{environment_yaml}' doesn't match an existing context in '.circleci/config.yaml'"
		exit
	end

	return circleci_context
end

def test_git_ssh_access()
	success = system("git pull")
	# success = system("git pull")
	if not success
		puts "\n\nError: Could not pull from repo."
		puts "Make sure this repo origin is set to use SSH (git@github.com:...)"
		puts "rather than HTTPS (https://<user>@github.com/...)"
		system("ssh git@github.com")
		exit
	end
end


def tag_repo(project, environment)

	context = validate_circleci_context(project, environment)

	timeStamp = Time.now.strftime("%F-%H%M%S")

	tag = "#{$deployTagPrefix}/#{context}/#{project}/#{environment}/#{timeStamp}-#{ENV['HOST_USER']}"

	puts "Tagging repo with #{tag}"

	# Check if user has repo access
	test_git_ssh_access()

	# Check for unpushed commits
	current_branch=`git rev-parse --abbrev-ref HEAD`
	unpushed_commits=`git log origin/#{current_branch.gsub("\n", "")}..HEAD --pretty=format:'%H'`
	if unpushed_commits.length > 0
		puts "Error: Some commits are unpushed. Please push these commits before tagging"
		exit
	end

	# system("git push origin ':#{tag}'")
	# system("git tag -l '#{$deployTagPrefix}/*' | xargs git tag -d")
	system("git fetch")
	system("git tag -a #{tag} -m 'Generated by deploy.rb'")
	system("git push --tags")
	system("git fetch --prune --tags")

end
